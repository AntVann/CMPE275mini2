# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import basecamp_pb2 as basecamp__pb2

GRPC_GENERATED_VERSION = '1.71.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in basecamp_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class BasecampServiceStub(object):
    """Service definition for Basecamp
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SendMessage = channel.unary_unary(
                '/basecamp.BasecampService/SendMessage',
                request_serializer=basecamp__pb2.MessageRequest.SerializeToString,
                response_deserializer=basecamp__pb2.MessageResponse.FromString,
                _registered_method=True)
        self.SubscribeToUpdates = channel.unary_stream(
                '/basecamp.BasecampService/SubscribeToUpdates',
                request_serializer=basecamp__pb2.SubscriptionRequest.SerializeToString,
                response_deserializer=basecamp__pb2.UpdateResponse.FromString,
                _registered_method=True)
        self.SendMultipleMessages = channel.stream_unary(
                '/basecamp.BasecampService/SendMultipleMessages',
                request_serializer=basecamp__pb2.MessageRequest.SerializeToString,
                response_deserializer=basecamp__pb2.BatchResponse.FromString,
                _registered_method=True)
        self.Chat = channel.stream_stream(
                '/basecamp.BasecampService/Chat',
                request_serializer=basecamp__pb2.ChatMessage.SerializeToString,
                response_deserializer=basecamp__pb2.ChatMessage.FromString,
                _registered_method=True)
        self.QueryData = channel.unary_unary(
                '/basecamp.BasecampService/QueryData',
                request_serializer=basecamp__pb2.QueryRequest.SerializeToString,
                response_deserializer=basecamp__pb2.QueryResponse.FromString,
                _registered_method=True)
        self.GatherData = channel.unary_unary(
                '/basecamp.BasecampService/GatherData',
                request_serializer=basecamp__pb2.DataRequest.SerializeToString,
                response_deserializer=basecamp__pb2.DataResponse.FromString,
                _registered_method=True)


class BasecampServiceServicer(object):
    """Service definition for Basecamp
    """

    def SendMessage(self, request, context):
        """Simple RPC for sending a message
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeToUpdates(self, request, context):
        """Server streaming RPC for receiving updates
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendMultipleMessages(self, request_iterator, context):
        """Client streaming RPC for sending multiple messages
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Chat(self, request_iterator, context):
        """Bidirectional streaming RPC for continuous communication
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QueryData(self, request, context):
        """Query RPC for data retrieval across the network
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GatherData(self, request, context):
        """Internal RPC for peer-to-peer data gathering (used between nodes)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BasecampServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SendMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.SendMessage,
                    request_deserializer=basecamp__pb2.MessageRequest.FromString,
                    response_serializer=basecamp__pb2.MessageResponse.SerializeToString,
            ),
            'SubscribeToUpdates': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeToUpdates,
                    request_deserializer=basecamp__pb2.SubscriptionRequest.FromString,
                    response_serializer=basecamp__pb2.UpdateResponse.SerializeToString,
            ),
            'SendMultipleMessages': grpc.stream_unary_rpc_method_handler(
                    servicer.SendMultipleMessages,
                    request_deserializer=basecamp__pb2.MessageRequest.FromString,
                    response_serializer=basecamp__pb2.BatchResponse.SerializeToString,
            ),
            'Chat': grpc.stream_stream_rpc_method_handler(
                    servicer.Chat,
                    request_deserializer=basecamp__pb2.ChatMessage.FromString,
                    response_serializer=basecamp__pb2.ChatMessage.SerializeToString,
            ),
            'QueryData': grpc.unary_unary_rpc_method_handler(
                    servicer.QueryData,
                    request_deserializer=basecamp__pb2.QueryRequest.FromString,
                    response_serializer=basecamp__pb2.QueryResponse.SerializeToString,
            ),
            'GatherData': grpc.unary_unary_rpc_method_handler(
                    servicer.GatherData,
                    request_deserializer=basecamp__pb2.DataRequest.FromString,
                    response_serializer=basecamp__pb2.DataResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'basecamp.BasecampService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('basecamp.BasecampService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class BasecampService(object):
    """Service definition for Basecamp
    """

    @staticmethod
    def SendMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/basecamp.BasecampService/SendMessage',
            basecamp__pb2.MessageRequest.SerializeToString,
            basecamp__pb2.MessageResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SubscribeToUpdates(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/basecamp.BasecampService/SubscribeToUpdates',
            basecamp__pb2.SubscriptionRequest.SerializeToString,
            basecamp__pb2.UpdateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SendMultipleMessages(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(
            request_iterator,
            target,
            '/basecamp.BasecampService/SendMultipleMessages',
            basecamp__pb2.MessageRequest.SerializeToString,
            basecamp__pb2.BatchResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Chat(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/basecamp.BasecampService/Chat',
            basecamp__pb2.ChatMessage.SerializeToString,
            basecamp__pb2.ChatMessage.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def QueryData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/basecamp.BasecampService/QueryData',
            basecamp__pb2.QueryRequest.SerializeToString,
            basecamp__pb2.QueryResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GatherData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/basecamp.BasecampService/GatherData',
            basecamp__pb2.DataRequest.SerializeToString,
            basecamp__pb2.DataResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
